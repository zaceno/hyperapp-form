{"version":3,"sources":["dist/hyperappform.js"],"names":["hyperappform","exports","hyperapp","preventDefault","f","_","e","dispatch","a","p","d","HandleSubmit","appState","event","onsubmit","validators","getFormState","setFormState","state","submitted","errors","Object","fromEntries","entries","map","name","validator","values","valid","reduce","ok","error","Set","value","[object Object]","Validate","SetAndValidate","data","provideFormContext","context","node","Array","isArray","n","provider","props","type","children","withFormContext","widget","disabled","text","opts","h","class","oninput","ev","target","undefined","onblur","radio","checked","onchange","check","myval","indexOf","nval","filter","x","length","str","form","content","init","input","select","options","child","setAttribute","Element","prototype","appendChild","call","this","submit"],"mappings":"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","sourcesContent":["var hyperappform = (function (exports, hyperapp) {\n    const preventDefault = (f => e => [f, { e }])((_, { e }) => e.preventDefault());\n\n    const dispatch = (f => (a, p) => [f, { a, p }])((d, { a, p }) => d(a, p));\n\n    const HandleSubmit = (\n        appState,\n        { event, onsubmit, validators, getFormState, setFormState }\n    ) => {\n        let state = getFormState(appState);\n        if (state.submitted) return appState // submitted forms cannot be resubmitted\n        let errors = Object.fromEntries(\n            Object.entries(validators).map(([name, validator]) => [\n                name,\n                validator(state.values[name], state.values),\n            ])\n        );\n        let valid = Object.entries(errors).reduce(\n            (ok, [_, error]) => ok && !error,\n            true\n        );\n        return [\n            setFormState(appState, { ...state, errors, submitted: valid }),\n            valid && dispatch(onsubmit, state.values),\n            preventDefault(event),\n        ]\n    };\n\n    const Set = (\n        appState,\n        { name, value, getFormState, setFormState },\n        state = getFormState(appState)\n    ) =>\n        state.submitted\n            ? appState\n            : setFormState(appState, {\n                  ...state,\n                  values: {\n                      ...state.values,\n                      [name]: value,\n                  },\n              });\n\n    const Validate = (\n        appState,\n        { name, validators, getFormState, setFormState },\n        state = getFormState(appState)\n    ) =>\n        state.submitted\n            ? appState\n            : setFormState(appState, {\n                  ...state,\n                  errors: {\n                      ...state.errors,\n                      [name]: validators[name]\n                          ? validators[name](state.values[name], state.values)\n                          : '',\n                  },\n              });\n\n    const SetAndValidate = (state, data) => [\n        state,\n        dispatch(Set, data),\n        dispatch(Validate, data),\n    ];\n\n    const provideFormContext = (context, node) => {\n        if (Array.isArray(node))\n            return node.map(n => provideFormContext(context, n))\n        if (!node.f)\n            return { ...node, children: provideFormContext(context, node.children) }\n        if (!node.provider || node.provider !== provideFormContext) return node\n        node = node.f(context);\n        if (!node.props) return { name: node, type: 3, children: [], props: {} }\n        return node\n    };\n\n    const withFormContext = f => ({ f, provider: provideFormContext });\n\n    const form = ({ appState, getFormState, setFormState, onsubmit }, content) => {\n        let validators = {};\n        return hyperapp.h(\n            'form',\n            {\n                onsubmit: [\n                    HandleSubmit,\n                    event => ({\n                        event,\n                        onsubmit,\n                        validators,\n                        getFormState,\n                        setFormState,\n                    }),\n                ],\n            },\n            provideFormContext(\n                {\n                    validators,\n                    state: getFormState(appState),\n                    getFormState,\n                    setFormState,\n                },\n                content\n            )\n        )\n    };\n    const widget = (name, validator, f) =>\n        withFormContext(({ state, validators, getFormState, setFormState }) => {\n            if (validator) validators[name] = validator;\n            return f({\n                value: state.values[name],\n                error: state.errors[name],\n                disabled: state.submitted,\n                Set: [\n                    Set,\n                    value => ({\n                        getFormState,\n                        setFormState,\n                        name,\n                        value,\n                        validators,\n                    }),\n                ],\n                Validate: [\n                    Validate,\n                    { name, getFormState, setFormState, validators },\n                ],\n                SetAndValidate: [\n                    SetAndValidate,\n                    value => ({\n                        name,\n                        value,\n                        validators,\n                        getFormState,\n                        setFormState,\n                    }),\n                ],\n            })\n        });\n\n    const text = opts =>\n        widget(\n            opts.name,\n            opts.validator,\n            ({ value, error, disabled, Set, Validate, SetAndValidate }) =>\n                hyperapp.h('input', {\n                    ...opts,\n                    type: opts.type || 'text',\n                    class: [opts.class, { error: !!error }],\n                    disabled,\n                    name: name,\n                    value: value,\n                    oninput: [error ? SetAndValidate : Set, ev => ev.target.value],\n                    ...(value === undefined ? {} : { onblur: Validate }),\n                })\n        );\n\n    const radio = opts =>\n        widget(\n            opts.name,\n            opts.validator,\n            ({ value, error, disabled, SetAndValidate }) =>\n                hyperapp.h('input', {\n                    ...opts,\n                    type: 'radio',\n                    class: [opts.class, { error }],\n                    name: opts.name,\n                    value: opts.value || 'on',\n                    disabled,\n                    checked: value === (opts.value || 'on'),\n                    onchange: [SetAndValidate, opts.value || 'on'],\n                })\n        );\n\n    const check = opts =>\n        widget(\n            opts.name,\n            opts.validator,\n            (\n                { value, error, disabled, SetAndValidate },\n                myval = opts.value || 'on'\n            ) =>\n                hyperapp.h('input', {\n                    ...opts,\n                    type: 'checkbox',\n                    class: [opts.class, { error }],\n                    disabled,\n                    checked: Array.isArray(value)\n                        ? value.indexOf(myval) >= 0\n                        : value === myval,\n                    name: opts.name,\n                    value: myval,\n                    onchange: [\n                        SetAndValidate,\n                        (\n                            ev,\n                            nval = [\n                                ...(!value\n                                    ? []\n                                    : Array.isArray(value)\n                                    ? value\n                                    : [value]\n                                ).filter(x => x !== myval),\n                                ...(ev.target.checked ? [myval] : []),\n                            ]\n                        ) =>\n                            nval.length > 1\n                                ? nval\n                                : nval.length == 1\n                                ? nval[0]\n                                : '',\n                    ],\n                })\n        );\n\n    const input = props =>\n        props.type === 'checkbox'\n            ? check(props)\n            : props.type === 'radio'\n            ? radio(props)\n            : text(props);\n\n    const select = (opts, options) =>\n        widget(\n            opts.name,\n            opts.validator,\n            ({ value, error, disabled, SetAndValidate }) =>\n                hyperapp.h(\n                    'select',\n                    {\n                        ...opts,\n                        appendChild(child) {\n                            if (value === child.value)\n                                child.setAttribute('selected', 'selected');\n                            return Element.prototype.appendChild.call(this, child)\n                        },\n\n                        class: [opts.class, { error }],\n                        name: opts.name,\n                        value,\n                        disabled,\n                        oninput: [SetAndValidate, ev => ev.target.value],\n                    },\n                    options\n                )\n        );\n\n    const submit = (opts, content) =>\n        withFormContext(({ state }) =>\n            hyperapp.h(\n                'button',\n                {\n                    ...opts,\n                    type: 'submit',\n                    disabled: state.submitted,\n                },\n                content\n            )\n        );\n\n    const error = () =>\n        withFormContext(({ state }) =>\n            Object.entries(state.errors).reduce(\n                (str, [name, error]) => str || error,\n                ''\n            )\n        );\n\n    const init = (values = {}, errors = {}) => ({\n        values,\n        errors,\n        submitted: false,\n    });\n\n    exports.check = check;\n    exports.error = error;\n    exports.form = form;\n    exports.init = init;\n    exports.input = input;\n    exports.radio = radio;\n    exports.select = select;\n    exports.submit = submit;\n    exports.text = text;\n    exports.widget = widget;\n\n    return exports;\n\n}({}, hyperapp));\n//# sourceMappingURL=hyperappform.js.map\n"]}